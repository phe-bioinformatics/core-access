#! /usr/bin/env ruby
if ENV['core-access_test-libpath']
  $LOAD_PATH.unshift(ENV['core-access_test-libpath']) # read in lib path if testing
end
require 'core-access'
require 'utils/file_utils'

gem "choice", "~> 0.1.5"
require 'choice'
gem 'facter'
require 'facter'
Facter.loadfacts

core_access_command = ARGV.shift
argument_number = ARGV.size

Choice.options do
  banner 'core-access COMMAND [OPTIONS]'
  header 'COMMAND can be create, annotate search output or readme'
  header 'For options specific to a COMMAND type core-access COMMAND -h'
  header ''
  separator 'Arguments common to all commands:'

  option :database do
    short '-db'
    long '--database'
    desc 'Path to database file'
  end

  option :config_file do
    short '-cf'
    long '--config_file'
    desc 'A config file containing the arguments in YAML format'
  end

  option :output_dir do
    short '-od'
    long '--output_dir'
    desc 'The path to a directory where the results will be written (default is current directory)'
    default '.'
  end

  option :verbose do
    short '-v'
    long '--verbose'
    desc 'Print a more verbose output'
  end

  option :help do
    short '-h'
    long '--help'
    desc 'Show full help message detailing all commands'
  end

  separator ''
  separator 'Arguments for create command:'

  option :sequence_file_list do
    short '-fl'
    long '--sequence_file_list'
    desc 'The path and filename of a file containing the sequences that contain the genes to be clustered'
    desc 'These can be in fasta, genbank or embl format. If in fasta format Glimmer3 will be used to predict'
    desc 'the genes within them'
    desc 'Each filepath should be listed on a new line in the file'
    desc 'The strain name for each sequence file should be on the same line separated by tab'
  end

  option :sequence_file_dir do
    short '-fd'
    long '--sequence_file_dir'
    desc 'A root directory where all the sequence files can be found'
  end

  option :glimmer_dir do
    short '-gd'
    long '--glimmer_dir'
    desc 'The path to the directory that contains the Glimmer3 files (binaries and scripts)'
  end

  option :training_sequence_path do
    short '-ts'
    long '--training_sequence_path'
    desc 'The path and filename of a genbank sequence whose coding sequences will be used to train the'
    desc 'Glimmer3 gene prediction software'
  end

  option :cdhit_dir do
    short '-cd'
    long '--cdhit_dir'
    desc 'The path to the directory that contains the cd-hit executable'
  end

  option :clustering_cutoffs do
    short '-cc'
    long '--clustering_cutoffs'
    desc 'The cutoffs used when performing the initial heirachical clustering with cd-hit (default 99-98-95-90-85)'
    default '99-98-95-90-85'
  end

  option :supercluster_cutoff do
    short '-sc'
    long '--supercluster_cutoff'
    desc 'The cutoff for making heirachical superclusters of clusters with cd-hit'
    cast Integer
  end

  separator ''
  separator 'Arguments for annotate command:'

  option :blast_dir do
    short '-bd'
    long '--blast_dir'
    desc 'The path to the blast executables/binaries'
  end

  separator ''
  separator 'Blast arguments for annotate command:'

  option :reference_blast_sequences do
    short '-rbs'
    long '--reference_blast_sequences'
    desc 'Paths to the reference sequences to be used for first pass blast searching (GenBank or EMBL format)'
    desc 'This should be a comma separated list with no spaces e.g /path/to/ref_seq1.gbk,/path/to/ref_seq2.gbk'
  end

  option :reference_blast_program do
    short '-rbp'
    long '--reference_blast_program'
    desc 'The blast program to use when searching the reference sequences supplied (Default blastn)'
    default 'blastn'
  end

  option :reference_percent_identity_cutoff do
    short '-rbc'
    long '--reference_percent_identity_cutoff'
    desc 'The percent identity cutoff to use for significant hits against the reference sequences supplied'
    desc '(Default 95)'
    cast Integer
    default 95
  end

  option :reference_minimum_hit_length do
    short '-rbl'
    long '--reference_minimum_hit_length'
    desc 'The minimum percent length of the query which must match in the blast alignment for significant hits'
    desc 'against the reference sequences supplied (Default 85)'
    cast Integer
    default 85
  end

  option :local_blast_database do
    short '-lbd'
    long '--local_blast_database'
    desc 'The path to a local genomes database where the genes have been extracted and formatted in a blast'
    desc 'database (see ReadMe for details: core-access readme)'
  end

  option :local_database_blast_program do
    short '-lbp'
    long '--local_database_blast_program'
    desc 'The blast program to use when searching a local genomes database(Default blastn)'
    default 'blastn'
  end

  option :local_database_percent_identity_cutoff do
    short '-lbc'
    long '--local_database_percent_identity_cutoff'
    desc 'The percent identity cutoff to use for significant hits against the local genomes database(Default 85)'
    cast Integer
    default 85
  end

  option :local_database_minimum_hit_length do
    short '-lbl'
    long '--local_database_minimum_hit_length'
    desc 'The minimum percent length of the query which must match in the blast alignment for significant hits'
    desc 'against a local genomes database (Deafult 85)'
    cast Integer
    default 85
  end

  option :annotate_versus_nr do
    short '-anr'
    long '--annotate_versus_nr'
    desc 'Whether to annotate using remote blast searches against the non-redundant database at NCBI'
  end

  option :ncbi_blast_program do
    short '-nbp'
    long '--ncbi_blast_program'
    desc 'The blast program to use when searching NCBI nr database(Default blastp)'
    default 'blastp'
  end

  option :ncbi_percent_identity_cutoff do
    short '-nbc'
    long '--ncbi_percent_identity_cutoff'
    desc 'The percent identity cutoff to use for significant hits against the rNCBI nr database (Default 80)'
    cast Integer
    default 80
  end

  option :ncbi_minimum_hit_length do
    short '-nbl'
    long '--ncbi_minimum_hit_length'
    desc 'The minimum percent length of the query which must match in the blast alignment for significant hits'
    desc 'against the NCBI nr database (Default 80)'
    cast Integer
    default 80
  end

  option :number_of_processors do
    short '-np'
    long '--number_of_processors'
    desc 'The number of processors to use when performining annotation. Default - number of cores - 2'
    default Facter.processorcount
  end

  separator ''
  separator 'Arguments for search command:'

  option :core_genes do
    short '-cg'
    long '--core_genes'
    desc 'Find core genes in the cluster database'
  end

  option :unique_genes do
    short '-ug'
    long '--unique_genes'
    desc 'Find unique genes for a set of starins (specified by the -sn argument) in the cluster database'
  end

  option :strain_names do
    short '-sn'
    long '--strain_names'
    desc 'A list of comma-separted strain names e.g strain1,strain2'
  end

  separator ''
  separator 'Arguments for output command:'

  option :presence_absence_file do
    short '-paf'
    long '--presence_absence_file'
    desc 'Filename to record output of gene presence absence data from the cluster database'
  end

  option :presence_absence_include_core do
    short '-pac'
    long '--presence_absence_core'
    desc 'Include core genes in presence absence file. Generally this will be superfluous'
  end

  option :genbank_strain_file_list do
    short '-gsfl'
    long '--genbank_strain_file_list'
    desc 'The path and filename of a file that contains a line-listing of the sequences to be written in genbank format'
    desc 'Each sequence filepath (probably a fasta file) should be listed on a new line in the file'
    desc 'The strain name for each sequence file should be on the same line separated by a tab'
    desc 'This will often be idetntical to the input file used to create the core-access database'
  end
  
  option :merge_genbank_contigs do
    short '-mgc'
    long '--merge_genbank_contigs'
    desc 'Whether to merge contigs into a single genbank entry when outputting sequences in genbank format'
  end

end

if Choice.choices[:help] || (core_access_command != "readme" && argument_number == 0)
  print_help_for(core_access_command)
  exit
end

abort(Choice.help) if core_access_command.nil? || !["create", "annotate", "search", "output", "readme"].include?(core_access_command)

if Choice.choices[:config_file]
  yaml_options = YAML.load(File.read(Choice.choices[:config_file]))
  yaml_options.each do |yaml_key, yaml_value|
    Choice.choices[yaml_key] = yaml_value
  end
end

if Choice.choices.has_key?("test")
  puts Choice.choices 
  abort
end

# determine which action needs to be carried out based on the command used
case core_access_command
when "create"
  # determine glimmer directory
  glimmer_dir = determine_glimmer_directory(Choice.choices)
  
  # create input sequence array
  unless Choice.choices[:sequence_file_list]
    print_help_for(core_access_command)
    puts
    abort("You must specify a file with the input sequences files using the -fl option")
  end
  sequence_files, strain_names = extract_file_and_strain_names_from_file_list(Choice.choices)

  if glimmer_dir.nil? && !sequence_files.select{|f| f =~ /(\.fa|\.fas|\.fsa|\.fasta)$/}.empty?
    print_help_for(core_access_command)
    puts
    abort("Your input sequence files contain fasta formats therefore you must either supply the directory that contains the glimmer files (binaries and scripts) e.g /usr/local/glimmer. Alternatively glimmer3 must be in your PATH")
  else
    unless File.executable?("#{glimmer_dir}/bin/glimmer3")
      print_help_for(core_access_command)
      puts
      abort("Can not find glimmer3 in #{glimmer_dir}/bin")
    end
  end

  # use cdhit to record cluster info
  # determine cdhit directory
  cdhit_dir = determine_cdhit_directory(Choice.choices)

  if cdhit_dir.nil?
    print_help_for(core_access_command)
    puts
    abort("Can not find cd-hit") 
  end

  unless File.executable?("#{cdhit_dir}/cd-hit")
    print_help_for(core_access_command)
    puts
    abort("Can not find cd-hit in #{cdhit_dir}") unless File.executable?("#{cdhit_dir}/cd-hit")
  end

  # make multi fasta file from genomes
  puts "Creating fasta file from predicted proteins of all sequences"
  create_cds_multi_fasta_file(:training_sequence_path => Choice.choices[:training_sequence_path], :root_folder  => Choice.choices[:output_dir], :cds_multi_fasta_file => "#{Choice.choices[:output_dir]}/cds_proteins.fas", :sequence_files => sequence_files, :verbose => Choice.choices.has_key?("verbose"))
  puts

  puts "Performing cdhit clustering"
  clustering_cutoffs = Choice.choices[:clustering_cutoffs].split("-").map{|n| n.to_i}
  make_heirachical_clusters(:root_folder  => Choice.choices[:output_dir],:cds_multi_fasta_file => "#{Choice.choices[:output_dir]}/cds_proteins.fas", :clustering_cutoffs => clustering_cutoffs, :cdhit_dir => cdhit_dir)

  puts "Making database from cdhit clustering"
  # make database from cd-hit output
  make_db_clusters(:root_folder => Choice.choices[:output_dir], :db_location => Choice.choices[:database], :strain_names => strain_names, :clustering_cutoffs => clustering_cutoffs, :verbose => Choice.choices.has_key?("verbose"))

  puts "Adding represenatives sequences to cluster database"
  # add represenatives to clusters
  add_representative_sequences_to_cluster(:root_folder => Choice.choices[:output_dir], :db_location => Choice.choices[:database], :sequence_files => sequence_files, :strain_names => strain_names, :verbose => Choice.choices.has_key?("verbose"))

  # add super clusters if cutoff supplied
  if Choice.choices[:supercluster_cutoff]
      make_super_clusters(:cdhit_dir => cdhit_dir, :cutoff => Choice.choices[:supercluster_cutoff], :db_location => Choice.choices[:database])
  end
when "annotate"

    unless Choice.choices[:reference_blast_sequences]
      print_help_for(core_access_command)
      puts
      abort("You must supply at least one reference sequence with which to annotate") 
    end
    reference_sequences = Choice.choices[:reference_blast_sequences].split(",")
    if Choice.choices[:annotate_versus_nr] 
    annotate_clusters(
      :db_location => Choice.choices[:database],
      :root_folder => Choice.choices[:output_dir],
      :blast_dir => Choice.choices[:blast_dir],
      :fastacmd_dir => Choice.choices[:blast_dir],
      :reference_genomes => reference_sequences,
      :reference_blast_program => Choice.choices[:reference_blast_program],
      :reference_percent_identity_cutoff => Choice.choices[:reference_percent_identity_cutoff],
      :reference_minimum_hit_length => Choice.choices[:reference_minimum_hit_length],
      :local_blast_db => Choice.choices[:local_blast_database],
      :local_db_blast_program => Choice.choices[:local_database_blast_program],
      :local_db_percent_identity_cutoff => Choice.choices[:local_database_percent_identity_cutoff],
      :local_db_minimum_hit_length => Choice.choices[:local_database_minimum_hit_length],
      :ncbi_blast_program => Choice.choices[:ncbi_blast_program],
      :ncbi_percent_identity_cutoff => Choice.choices[:ncbi_percent_identity_cutoff],
      :ncbi_minimum_hit_length => Choice.choices[:ncbi_minimum_hit_length],
      :annotate_vs_local_db => Choice.choices.has_key?("local_blast_database"),
      :annotate_by_remote_blast => Choice.choices.has_key?("annotate_versus_nr"),
      :accept_reciprocal_hits_with_multiple_hits_incl_query  => true,
      :accept_first_reciprocal_hit_containing_query => false,
      :parallel_processors => Choice.choices[:number_of_processors])
  end
when "search"
  default_headings_and_fields = [["id", "id"], ["cutoff", "cutoff"], ["parent cluster?", "is_parent_cluster"], ["number of members", "number_of_members"], ["number of strains", "number_of_strains"], ["strains", "strain_names"]]
  if Choice.choices[:core_genes]
    core_clusters = find_core_clusters(:db_location => Choice.choices[:database])
    puts default_headings_and_fields.map{|e| e.first}.join("\t")
    core_clusters.each do |core_cluster|
      print_cluster_summary(core_cluster, default_headings_and_fields.map{|e| e.last})
    end
  elsif Choice.choices[:unique_genes]
    unique_clusters = find_unique_clusters(:db_location => Choice.choices[:database], :strain_names => Choice.choices[:strain_names].split(","))
    puts default_headings_and_fields.map{|e| e.first}.join("\t")
    unique_clusters.each do |unique_cluster|
      print_cluster_summary(unique_cluster, default_headings_and_fields.map{|e| e.last})
    end
  end
when "output"
  if Choice.choices[:presence_absence_file]
    if Choice.choices[:presence_absence_include_core]
      without_core_genes = false
    else
      without_core_genes = true
    end
    output_gene_presence_absence(
          :db_location =>  Choice.choices[:database],
          :output_filepath => "#{Choice.choices[:output_dir]}/#{Choice.choices[:presence_absence_file]}",
          :without_core_genes => without_core_genes)
  elsif Choice.choices[:genbank_strain_file_list]
    require 'bioutils/rich_sequence_utils'
    sequence_files, strain_names = extract_file_and_strain_names_from_file_list(Choice.choices)
    strain_names.each_with_index do |strain_name, index|
      options = {
        :db_location =>  Choice.choices[:database],
        :output_dir => Choice.choices[:output_dir],
        :strain_name => strain_name,
        :sequence_file => sequence_files[index]
        }
      if Choice.choices[:merge_genbank_contigs]
        options[:merge_contigs] = true
      else
        options[:merge_contigs] = false
      end
      output_genbank_files_from_database(options)
    end
  end
when "readme"
  puts File.read(File.dirname(__FILE__) + "/../README.md")
end
